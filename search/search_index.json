{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#chatgpt-prompt-engineering-for-developers","title":"ChatGPT Prompt Engineering for Developers","text":"<p>Welcome to the ChatGPT Prompt Engineering guide for Developers! This guide will provide you with an overview of what prompt engineering is, why it's important, and how you can get started using ChatGPT.</p>"},{"location":"#what-is-prompt-engineering","title":"What is Prompt Engineering?","text":"<p>Prompt engineering is the process of designing and refining the prompts that are used to generate text with AI models like ChatGPT. By carefully crafting prompts, developers can improve the quality and relevance of the generated text.</p>"},{"location":"#why-is-prompt-engineering-important","title":"Why is Prompt Engineering Important?","text":"<p>Prompt engineering is important because it can significantly improve the performance of AI models like ChatGPT. By providing high-quality prompts that are well-suited to the task at hand, developers can improve the accuracy, fluency, and coherence of the generated text. In addition, well-designed prompts can help reduce bias in AI models and ensure that the generated text is ethical and fair.</p>"},{"location":"#getting-started-with-chatgpts-prompt-engineering-tools","title":"Getting Started with ChatGPT's Prompt Engineering Tools","text":"<ul> <li> <p>Install Miniconda from https:/.conda.io/en/latest/miniconda.html#windows-installers (for python)</p> </li> <li> <p>After imniconda installation, go to search and run Anaconda Prompt and create virtual environment using following commands</p> <p><code>conda create -y -n gpt python=3.11.0</code></p> </li> <li> <p>Activate the conda environment</p> <p><code>conda activate gpt</code></p> </li> <li> <p>Clone the repository to your local machine. </p> <p><code>git clone https://github.com/ashishkrb7/chatgpt.git \"ChatGPT Prompt Engineering for Developer\"</code> </p> </li> <li> <p>Go to working directory</p> <p><code>cd \"ChatGPT Prompt Engineering for Developer\"</code></p> </li> <li> <p>Install the required dependencies using </p> <p><code>python -m pip install -r requirements.txt</code></p> </li> <li> <p>Go to notebook folder</p> <p><code>cd docs/notebooks</code></p> </li> <li> <p>Create .env file. It should contain following information</p> <pre><code>api_type = \napi_base = \napi_version = \nOPENAI_API_KEY = \n</code></pre> </li> </ul>"},{"location":"#best-practices-for-prompt-engineering","title":"Best Practices for Prompt Engineering","text":"<p>Here are some best practices to keep in mind when designing and refining prompts for ChatGPT and other details you will get it in documentation and notebook file:</p> <ul> <li> <p>Be Clear and Specific: Your prompts should clearly communicate the task that you want the AI model to perform. Use specific language and provide as much detail as possible.</p> </li> <li> <p>Avoid Bias: Be mindful of any potential biases that may be introduced into the generated text. Use inclusive language and consider the potential impact of your prompts on different groups of people.</p> </li> <li> <p>Test and Iterate: Experiment with different prompts and see how they affect the generated text. Continuously refine your prompts based on feedback and performance metrics.</p> </li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Prompt engineering is a critical part of building AI applications with models like ChatGPT. By following best practices and using ChatGPT's prompt engineering tools, developers can improve the quality, relevance, and fairness of the generated text. If you're interested in learning more about prompt engineering or getting started with ChatGPT, be sure to check out the OpenAI website, documentation and this some of resources available in this website.</p>"},{"location":"Chatbot/","title":"Chatbot","text":""},{"location":"Chatbot/#the-chat-format","title":"The Chat Format","text":"<p>In this Page we will explore how you can utilize the chat format to have extended conversations with chatbots personalized or specialized for specific tasks or behaviors.</p>"},{"location":"Chatbot/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre> <pre><code>def get_completion_from_messages(messages, model=\"chatgpt-gpt35-turbo\", temperature=0):\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model's output\n    )\n#     print(str(response.choices[0].message))\n    return response.choices[0].message[\"content\"]\n</code></pre> <pre><code>messages =  [  \n{'role':'system', 'content':'You are an assistant that speaks like Shakespeare.'},    \n{'role':'user', 'content':'tell me a joke'},   \n{'role':'assistant', 'content':'Why did the chicken cross the road'},   \n{'role':'user', 'content':'I don\\'t know'}  ]\n</code></pre> <pre><code>response = get_completion_from_messages(messages, temperature=1)\nprint(response)\n</code></pre> <pre><code>To get to the other side! Aye, that be a classic, but it doth never fail to amuse.\n</code></pre> <pre><code>messages =  [  \n{'role':'system', 'content':'You are friendly chatbot.'},    \n{'role':'user', 'content':'Hi, my name is Ashish'}  ]\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n</code></pre> <pre><code>Greetings Ashish! How may I assist you today?\n</code></pre> <pre><code>messages =  [  \n{'role':'system', 'content':'You are friendly chatbot.'},    \n{'role':'user', 'content':'Yes,  can you remind me, What is my name?'}  ]\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n</code></pre> <pre><code>I'm sorry, but as an AI language model, I don't have access to your personal information, so I don't know your name. You can tell me your name if you'd like, and I'd be happy to address you by it!\n</code></pre> <pre><code>messages =  [  \n{'role':'system', 'content':'You are friendly chatbot.'},\n{'role':'user', 'content':'Hi, my name is Ashish'},\n{'role':'assistant', 'content': \"Hi Ashish! It's nice to meet you. \\\nIs there anything I can help you with today?\"},\n{'role':'user', 'content':'Yes, you can remind me, What is my name?'}  ]\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n</code></pre> <pre><code>Your name is Ashish, as you mentioned earlier.\n</code></pre>"},{"location":"Chatbot/#orderbot","title":"OrderBot","text":"<p>We can automate the collection of user prompts and assistant responses to build a  OrderBot. The OrderBot will take orders at a pizza restaurant. </p> <pre><code>def collect_messages(_):\n    prompt = inp.value_input\n    inp.value = ''\n    context.append({'role':'user', 'content':f\"{prompt}\"})\n    response = get_completion_from_messages(context) \n    context.append({'role':'assistant', 'content':f\"{response}\"})\n    panels.append(\n        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))\n    panels.append(\n        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, style={'background-color': '#F6F6F6'})))\n\n    return pn.Column(*panels)\n</code></pre> <p></p><pre><code>import panel as pn  # GUI\npn.extension()\n\npanels = [] # collect display \n\ncontext = [ {'role':'system', 'content':\"\"\"\nYou are OrderBot, an automated service to collect orders for a pizza restaurant. \\\nYou first greet the customer, then collects the order, \\\nand then asks if it's a pickup or delivery. \\\nYou wait to collect the entire order, then summarize it and check for a final \\\ntime if the customer wants to add anything else. \\\nIf it's a delivery, you ask for an address. \\\nFinally you collect the payment.\\\nMake sure to clarify all options, extras and sizes to uniquely \\\nidentify the item from the menu.\\\nYou respond in a short, very conversational friendly style. \\\nThe menu includes \\\npepperoni pizza  12.95, 10.00, 7.00 \\\ncheese pizza   10.95, 9.25, 6.50 \\\neggplant pizza   11.95, 9.75, 6.75 \\\nfries 4.50, 3.50 \\\ngreek salad 7.25 \\\nToppings: \\\nextra cheese 2.00, \\\nmushrooms 1.50 \\\nsausage 3.00 \\\ncanadian bacon 3.50 \\\nAI sauce 1.50 \\\npeppers 1.00 \\\nDrinks: \\\ncoke 3.00, 2.00, 1.00 \\\nsprite 3.00, 2.00, 1.00 \\\nbottled water 5.00 \\\n\"\"\"} ]  # accumulate messages\n\n\ninp = pn.widgets.TextInput(value=\"Hi\", placeholder='Enter text here\u2026')\nbutton_conversation = pn.widgets.Button(name=\"Chat!\")\n\ninteractive_conversation = pn.bind(collect_messages, button_conversation)\n\ndashboard = pn.Column(\n    inp,\n    pn.Row(button_conversation),\n    pn.panel(interactive_conversation, loading_indicator=True, height=300),\n)\n\ndashboard\n</code></pre> <pre><code>messages =  context.copy()\nmessages.append(\n{'role':'system', 'content':'create a json summary of the previous food order. Itemize the price for each item\\\n The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price '},    \n)\n #The fields should be 1) pizza, price 2) list of toppings 3) list of drinks, include size include price  4) list of sides include size include price, 5)total price '},    \n\nresponse = get_completion_from_messages(messages, temperature=0)\nprint(response)\n</code></pre> <pre><code>Here's a JSON summary of the previous food order:\n\n```\n{\n  \"pizza\": {\n    \"type\": \"cheese\",\n    \"size\": \"medium\",\n    \"price\": 9.25\n  },\n  \"toppings\": [\n    {\n      \"type\": \"peppers\",\n      \"price\": 1.00\n    }\n  ],\n  \"drinks\": [\n    {\n      \"type\": \"sprite\",\n      \"size\": \"medium\",\n      \"price\": 2.00\n    }\n  ],\n  \"sides\": [],\n  \"total_price\": 12.25\n}\n```\n\nNote that the total price is calculated by adding up the prices of the pizza, toppings, and drinks.\n</code></pre>"},{"location":"Expanding/","title":"Expanding","text":""},{"location":"Expanding/#expanding","title":"Expanding","text":"<p>In this lesson, you will generate customer service emails that are tailored to each customer's review.</p>"},{"location":"Expanding/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\", temperature=0):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Expanding/#customize-the-automated-reply-to-a-customer-email","title":"Customize the automated reply to a customer email","text":"<pre><code># given the sentiment from the lesson on \"inferring\",\n# and the original customer message, customize the email\nsentiment = \"negative\"\n\n# review for a blender\nreview = f\"\"\"\nSo, they still had the 17 piece system on seasonal \\\nsale for around $49 in the month of November, about \\\nhalf off, but for some reason (call it price gouging) \\\naround the second week of December the prices all went \\\nup to about anywhere from between $70-$89 for the same \\\nsystem. And the 11 piece system went up around $10 or \\\nso in price also from the earlier sale price of $29. \\\nSo it looks okay, but if you look at the base, the part \\\nwhere the blade locks into place doesn\u2019t look as good \\\nas in previous editions from a few years ago, but I \\\nplan to be very gentle with it (example, I crush \\\nvery hard items like beans, ice, rice, etc. in the \\ \nblender first then pulverize them in the serving size \\\nI want in the blender then switch to the whipping \\\nblade for a finer flour, and use the cross cutting blade \\\nfirst when making smoothies, then use the flat blade \\\nif I need them finer/less pulpy). Special tip when making \\\nsmoothies, finely cut and freeze the fruits and \\\nvegetables (if using spinach-lightly stew soften the \\ \nspinach then freeze until ready for use-and if making \\\nsorbet, use a small to medium sized food processor) \\ \nthat you plan to use that way you can avoid adding so \\\nmuch ice if at all-when making your smoothie. \\\nAfter about a year, the motor was making a funny noise. \\\nI called customer service but the warranty expired \\\nalready, so I had to buy another one. FYI: The overall \\\nquality has gone done in these types of products, so \\\nthey are kind of counting on brand recognition and \\\nconsumer loyalty to maintain sales. Got it in about \\\ntwo days.\n\"\"\"\n</code></pre> <pre><code>prompt = f\"\"\"\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service. \nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Dear Valued Customer,\n\nThank you for taking the time to leave a review about our product. We are sorry to hear that you experienced an issue with the motor after a year of use. We apologize for any inconvenience this may have caused you.\n\nWe appreciate your feedback regarding the pricing of our product. We assure you that we do not engage in price gouging and that our prices are subject to change based on various factors, including supply and demand.\n\nIf you have any further concerns or questions, please do not hesitate to reach out to our customer service team. They will be more than happy to assist you.\n\nThank you again for your review and for choosing our product.\n\nBest regards,\n\nAI customer agent\n</code></pre>"},{"location":"Expanding/#remind-the-model-to-use-details-from-the-customers-email","title":"Remind the model to use details from the customer's email","text":"<pre><code>prompt = f\"\"\"\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service. \nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n\"\"\"\nresponse = get_completion(prompt, temperature=0.7)\nprint(response)\n</code></pre> <pre><code>Dear Valued Customer,\n\nThank you for taking the time to leave a review. We apologize for any inconvenience caused by the price increase and the decrease in product quality. We understand your frustration and we would like to offer our sincere apologies.\n\nWe value your feedback and would like to assure you that we take all customer complaints seriously. If you have any further concerns or questions, please do not hesitate to contact our customer service team.\n\nWe appreciate your loyalty and hope to continue providing you with quality products in the future.\n\nBest regards,\n\nAI customer agent\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Guidelines/","title":"Principles","text":""},{"location":"Guidelines/#guidelines-for-prompting","title":"Guidelines for Prompting","text":"<p>This page describes two prompting principles and their related tactics in order to write effective prompts for large language models.</p>"},{"location":"Guidelines/#setup","title":"Setup","text":""},{"location":"Guidelines/#load-the-api-key-and-relevant-python-libaries","title":"Load the API key and relevant Python libaries.","text":"<p>In this course, we've provided some code that loads the OpenAI API key for you.</p> <pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre>"},{"location":"Guidelines/#helper-function","title":"Helper function","text":"<p>Throughout the discussion, we will use OpenAI's <code>gpt-3.5-turbo</code> model and the chat completions endpoint. </p> <p>This helper function will make it easier to use prompts and look at the generated outputs:</p> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Guidelines/#prompting-principles","title":"Prompting Principles","text":"<ul> <li>Principle 1: Write clear and specific instructions</li> <li>Principle 2: Give the model time to \u201cthink\u201d</li> </ul>"},{"location":"Guidelines/#principle-1-write-clear-and-specific-instructions","title":"Principle 1: Write clear and specific instructions","text":""},{"location":"Guidelines/#tactic-1-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input","title":"Tactic 1: Use delimiters to clearly indicate distinct parts of the input","text":"<ul> <li>Delimiters can be anything like: <code>``, \"\"\", &lt; &gt;,</code> <code>,</code>:`</li> </ul> <pre><code>text = f\"\"\"You should express what you want a model to do by \\ \nproviding instructions that are as clear and \\ \nspecific as you can possibly make them. \\ \nThis will guide the model towards the desired output, \\ \nand reduce the chances of receiving irrelevant \\ \nor incorrect responses. Don't confuse writing a \\ \nclear prompt with writing a short prompt. \\ \nIn many cases, longer prompts provide more clarity \\ \nand context for the model, which can lead to \\ \nmore detailed and relevant outputs.\n\"\"\"\nprompt = f\"\"\"\nSummarize the text delimited by triple backticks \\ \ninto a single sentence.\n```{text}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>To guide a model towards the desired output and reduce the chances of irrelevant or incorrect responses, it is important to provide clear and specific instructions, which may require longer prompts for more clarity and context.\n</code></pre>"},{"location":"Guidelines/#tactic-2-ask-for-a-structured-output","title":"Tactic 2: Ask for a structured output","text":"<ul> <li>JSON, HTML</li> </ul> <pre><code>prompt = f\"\"\"\nGenerate a list of three made-up book titles along \\ \nwith their authors and genres. \nProvide them in JSON format with the following keys: \nbook_id, title, author, genre.\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>[\n  {\n    \"book_id\": 1,\n    \"title\": \"The Lost City of Zorath\",\n    \"author\": \"Aria Blackwood\",\n    \"genre\": \"Fantasy\"\n  },\n  {\n    \"book_id\": 2,\n    \"title\": \"The Last Survivors\",\n    \"author\": \"Ethan Stone\",\n    \"genre\": \"Science Fiction\"\n  },\n  {\n    \"book_id\": 3,\n    \"title\": \"The Secret Life of Bees\",\n    \"author\": \"Lila Rose\",\n    \"genre\": \"Romance\"\n  }\n]\n</code></pre>"},{"location":"Guidelines/#tactic-3-ask-the-model-to-check-whether-conditions-are-satisfied","title":"Tactic 3: Ask the model to check whether conditions are satisfied","text":"<pre><code>text_1 = f\"\"\"\nMaking a cup of tea is easy! First, you need to get some \\ \nwater boiling. While that's happening, \\ \ngrab a cup and put a tea bag in it. Once the water is \\ \nhot enough, just pour it over the tea bag. \\ \nLet it sit for a bit so the tea can steep. After a \\ \nfew minutes, take out the tea bag. If you \\ \nlike, you can add some sugar or milk to taste. \\ \nAnd that's it! You've got yourself a delicious \\ \ncup of tea to enjoy.\n\"\"\"\nprompt = f\"\"\"\nYou will be provided with text delimited by triple quotes. \nIf it contains a sequence of instructions, \\ \nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - \u2026\n\u2026\nStep N - \u2026\n\nIf the text does not contain a sequence of instructions, \\ \nthen simply write \\\"No steps provided.\\\"\n\n\\\"\\\"\\\"{text_1}\\\"\\\"\\\"\n\"\"\"\nresponse = get_completion(prompt)\nprint(\"Completion for Text 1:\")\nprint(response)\n</code></pre> <pre><code>Completion for Text 1:\nStep 1 - Get some water boiling.\nStep 2 - Grab a cup and put a tea bag in it.\nStep 3 - Once the water is hot enough, pour it over the tea bag.\nStep 4 - Let it sit for a bit so the tea can steep.\nStep 5 - After a few minutes, take out the tea bag.\nStep 6 - Add some sugar or milk to taste.\nStep 7 - Enjoy your delicious cup of tea!\n</code></pre> <pre><code>text_2 = f\"\"\"\nThe sun is shining brightly today, and the birds are \\\nsinging. It's a beautiful day to go for a \\ \nwalk in the park. The flowers are blooming, and the \\ \ntrees are swaying gently in the breeze. People \\ \nare out and about, enjoying the lovely weather. \\ \nSome are having picnics, while others are playing \\ \ngames or simply relaxing on the grass. It's a \\ \nperfect day to spend time outdoors and appreciate the \\ \nbeauty of nature.\n\"\"\"\nprompt = f\"\"\"\nYou will be provided with text delimited by triple quotes. \nIf it contains a sequence of instructions, \\ \nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - \u2026\n\u2026\nStep N - \u2026\n\nIf the text does not contain a sequence of instructions, \\ \nthen simply write \\\"No steps provided.\\\"\n\n\\\"\\\"\\\"{text_2}\\\"\\\"\\\"\n\"\"\"\nresponse = get_completion(prompt)\nprint(\"Completion for Text 2:\")\nprint(response)\n</code></pre> <pre><code>Completion for Text 2:\nNo steps provided.\n</code></pre>"},{"location":"Guidelines/#tactic-4-few-shot-prompting","title":"Tactic 4: \"Few-shot\" prompting","text":"<pre><code>prompt = f\"\"\"\nYour task is to answer in a consistent style.\n\n&lt;child&gt;: Teach me about patience.\n\n&lt;grandparent&gt;: The river that carves the deepest \\ \nvalley flows from a modest spring; the \\ \ngrandest symphony originates from a single note; \\ \nthe most intricate tapestry begins with a solitary thread.\n\n&lt;child&gt;: Teach me about resilience.\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>&lt;grandparent&gt;: Resilience is like a tree that bends with the wind but never breaks. It is the ability to bounce back from adversity and keep moving forward, even when things get tough. Just like a tree that grows stronger with each storm it weathers, resilience is a quality that can be developed and strengthened over time.\n</code></pre>"},{"location":"Guidelines/#principle-2-give-the-model-time-to-think","title":"Principle 2: Give the model time to \u201cthink\u201d","text":""},{"location":"Guidelines/#tactic-1-specify-the-steps-required-to-complete-a-task","title":"Tactic 1: Specify the steps required to complete a task","text":"<pre><code>text = f\"\"\"\nIn a charming village, siblings Jack and Jill set out on \\ \na quest to fetch water from a hilltop \\ \nwell. As they climbed, singing joyfully, misfortune \\ \nstruck\u2014Jack tripped on a stone and tumbled \\ \ndown the hill, with Jill following suit. \\ \nThough slightly battered, the pair returned home to \\ \ncomforting embraces. Despite the mishap, \\ \ntheir adventurous spirits remained undimmed, and they \\ \ncontinued exploring with delight.\n\"\"\"\n# example 1\nprompt_1 = f\"\"\"\nPerform the following actions: \n1 - Summarize the following text delimited by triple \\\nbackticks with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the following \\\nkeys: french_summary, num_names.\n\nSeparate your answers with line breaks.\n\nText:\n```{text}```\n\"\"\"\nresponse = get_completion(prompt_1)\nprint(\"Completion for prompt 1:\")\nprint(response)\n</code></pre> <pre><code>Completion for prompt 1:\nTwo siblings, Jack and Jill, go on a quest to fetch water from a hilltop well, but misfortune strikes as they both fall down the hill, yet they return home slightly battered but with their adventurous spirits undimmed.\n\nDeux fr\u00e8res et s\u0153urs, Jack et Jill, partent en qu\u00eate d'eau d'un puits au sommet d'une colline, mais ils tombent tous les deux et retournent chez eux l\u00e9g\u00e8rement meurtris mais avec leur esprit d'aventure intact. \nNoms: Jack, Jill.\n\n{\n\"french_summary\": \"Deux fr\u00e8res et s\u0153urs, Jack et Jill, partent en qu\u00eate d'eau d'un puits au sommet d'une colline, mais ils tombent tous les deux et retournent chez eux l\u00e9g\u00e8rement meurtris mais avec leur esprit d'aventure intact.\",\n\"num_names\": 2\n}\n</code></pre>"},{"location":"Guidelines/#ask-for-output-in-a-specified-format","title":"Ask for output in a specified format","text":"<pre><code>prompt_2 = f\"\"\"\nYour task is to perform the following actions: \n1 - Summarize the following text delimited by \n  &lt;&gt; with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the \n  following keys: french_summary, num_names.\n\nUse the following format:\nText: &lt;text to summarize&gt;\nSummary: &lt;summary&gt;\nTranslation: &lt;summary translation&gt;\nNames: &lt;list of names in Italian summary&gt;\nOutput JSON: &lt;json with summary and num_names&gt;\n\nText: &lt;{text}&gt;\n\"\"\"\nresponse = get_completion(prompt_2)\nprint(\"\\nCompletion for prompt 2:\")\nprint(response)\n</code></pre> <pre><code>Completion for prompt 2:\nSummary: Jack and Jill go on a quest to fetch water, but misfortune strikes and they tumble down the hill, returning home slightly battered but with their adventurous spirits undimmed. \nTranslation: Jack et Jill partent en qu\u00eate d'eau, mais la malchance frappe et ils d\u00e9gringolent la colline, rentrant chez eux l\u00e9g\u00e8rement meurtris mais avec leurs esprits aventureux intacts.\nNames: Jack, Jill\nOutput JSON: {\"french_summary\": \"Jack et Jill partent en qu\u00eate d'eau, mais la malchance frappe et ils d\u00e9gringolent la colline, rentrant chez eux l\u00e9g\u00e8rement meurtris mais avec leurs esprits aventureux intacts.\", \"num_names\": 2}\n</code></pre>"},{"location":"Guidelines/#tactic-2-instruct-the-model-to-work-out-its-own-solution-before-rushing-to-a-conclusion","title":"Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion","text":"<pre><code>prompt = f\"\"\"\nDetermine if the student's solution is correct or not.\n\nQuestion:\nI'm building a solar power installation and I need \\\n help working out the financials. \n- Land costs $100 / square foot\n- I can buy solar panels for $250 / square foot\n- I negotiated a contract for maintenance that will cost \\ \nme a flat $100k per year, and an additional $10 / square \\\nfoot\nWhat is the total cost for the first year of operations \nas a function of the number of square feet.\n\nStudent's Solution:\nLet x be the size of the installation in square feet.\nCosts:\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 100x\nTotal cost: 100x + 250x + 100,000 + 100x = 450x + 100,000\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The student's solution is correct.\n</code></pre>"},{"location":"Guidelines/#note-that-the-students-solution-is-actually-not-correct","title":"Note that the student's solution is actually not correct.","text":""},{"location":"Guidelines/#we-can-fix-this-by-instructing-the-model-to-work-out-its-own-solution-first","title":"We can fix this by instructing the model to work out its own solution first.","text":"<pre><code>prompt = f\"\"\"\nYour task is to determine if the student's solution \\\nis correct or not.\nTo solve the problem do the following:\n- First, work out your own solution to the problem. \n- Then compare your solution to the student's solution \\ \nand evaluate if the student's solution is correct or not. \nDon't decide if the student's solution is correct until \nyou have done the problem yourself.\n\nUse the following format:\nQuestion:\n</code></pre> question here <pre><code>Student's solution:\n</code></pre> student's solution here <pre><code>Actual solution:\n</code></pre> steps to work out the solution and your solution here <pre><code>Is the student's solution the same as actual solution \\\njust calculated:\n</code></pre> yes or no <pre><code>Student grade:\n</code></pre> correct or incorrect <pre><code>Question:\n</code></pre> I'm building a solar power installation and I need help \\ working out the financials.  - Land costs $100 / square foot - I can buy solar panels for $250 / square foot - I negotiated a contract for maintenance that will cost \\ me a flat $100k per year, and an additional $10 / square \\ foot What is the total cost for the first year of operations \\ as a function of the number of square feet. <pre><code>Student's solution:\n</code></pre> Let x be the size of the installation in square feet. Costs: 1. Land cost: 100x 2. Solar panel cost: 250x 3. Maintenance cost: 100,000 + 100x Total cost: 100x + 250x + 100,000 + 100x = 450x + 100,000 <pre><code>Actual solution:\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Let x be the size of the installation in square feet.\n\nCosts:\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 10x\n\nTotal cost: 100x + 250x + 100,000 + 10x = 360x + 100,000\n\nIs the student's solution the same as actual solution just calculated:\nNo\n\nStudent grade:\nIncorrect\n</code></pre>"},{"location":"Guidelines/#model-limitations-hallucinations","title":"Model Limitations: Hallucinations","text":"<ul> <li>Boie is a real company, the product name is not real.</li> </ul> <pre><code>prompt = f\"\"\"\nTell me about AeroGlide UltraSlim Smart Toothbrush by Boie\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The AeroGlide UltraSlim Smart Toothbrush by Boie is a high-tech toothbrush that uses advanced sonic technology to provide a deep and thorough clean. It features a slim and sleek design that makes it easy to hold and maneuver, and it comes with a range of smart features that help you optimize your brushing routine.\n\nOne of the key features of the AeroGlide UltraSlim Smart Toothbrush is its sonic technology, which uses high-frequency vibrations to break up plaque and bacteria on your teeth and gums. This technology is highly effective at removing even the most stubborn stains and buildup, and it can help you achieve a brighter, healthier smile in just a few weeks.\n\nIn addition to its sonic technology, the AeroGlide UltraSlim Smart Toothbrush also comes with a range of smart features that help you optimize your brushing routine. These include a built-in timer that ensures you brush for the recommended two minutes, as well as a pressure sensor that alerts you if you're brushing too hard.\n\nOverall, the AeroGlide UltraSlim Smart Toothbrush by Boie is a highly advanced and effective toothbrush that can help you achieve a brighter, healthier smile in no time. Whether you're looking to improve your oral hygiene or simply want a more convenient and effective way to brush your teeth, this toothbrush is definitely worth considering.\n</code></pre>"},{"location":"Guidelines/#a-note-about-the-backslash","title":"A note about the backslash","text":"<ul> <li>We are using a backslash <code>\\</code> to make the text fit on the screen without inserting newline '\\n' characters.</li> <li>GPT-3 isn't really affected whether you insert newline characters or not.  But when working with LLMs in general, you may consider whether newline characters in your prompt may affect the model's performance.</li> </ul>"},{"location":"Inferring/","title":"Inferring","text":""},{"location":"Inferring/#inferring","title":"Inferring","text":"<p>In this page we will infer sentiment and topics from product reviews and news articles.</p>"},{"location":"Inferring/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Inferring/#product-review-text","title":"Product review text","text":"<pre><code>lamp_review = \"\"\"\nNeeded a nice lamp for my bedroom, and this one had \\\nadditional storage and not too high of a price point. \\\nGot it fast.  The string to our lamp broke during the \\\ntransit and the company happily sent over a new one. \\\nCame within a few days as well. It was easy to put \\\ntogether.  I had a missing part, so I contacted their \\\nsupport and they very quickly got me the missing piece! \\\nLumina seems to me to be a great company that cares \\\nabout their customers and products!!\n\"\"\"\n</code></pre>"},{"location":"Inferring/#sentiment-positivenegative","title":"Sentiment (positive/negative)","text":"<pre><code>prompt = f\"\"\"\nWhat is the sentiment of the following product review, \nwhich is delimited with triple backticks?\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The sentiment of the product review is positive.\n</code></pre> <pre><code>prompt = f\"\"\"\nWhat is the sentiment of the following product review, \nwhich is delimited with triple backticks?\n\nGive your answer as a single word, either \"positive\" \\\nor \"negative\".\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>positive\n</code></pre>"},{"location":"Inferring/#identify-types-of-emotions","title":"Identify types of emotions","text":"<pre><code>prompt = f\"\"\"\nIdentify a list of emotions that the writer of the \\\nfollowing review is expressing. Include no more than \\\nfive items in the list. Format your answer as a list of \\\nlower-case words separated by commas.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>happy, satisfied, grateful, impressed, content\n</code></pre>"},{"location":"Inferring/#identify-anger","title":"Identify anger","text":"<pre><code>prompt = f\"\"\"\nIs the writer of the following review expressing anger?\\\nThe review is delimited with triple backticks. \\\nGive your answer as either yes or no.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>No\n</code></pre>"},{"location":"Inferring/#extract-product-and-company-name-from-customer-reviews","title":"Extract product and company name from customer reviews","text":"<pre><code>prompt = f\"\"\"\nIdentify the following items from the review text: \n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n\"Item\" and \"Brand\" as the keys. \nIf the information isn't present, use \"unknown\" \\\nas the value.\nMake your response as short as possible.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>{\n  \"Item\": \"lamp\",\n  \"Brand\": \"Lumina\"\n}\n</code></pre>"},{"location":"Inferring/#doing-multiple-tasks-at-once","title":"Doing multiple tasks at once","text":"<pre><code>prompt = f\"\"\"\nIdentify the following items from the review text: \n- Sentiment (positive or negative)\n- Is the reviewer expressing anger? (true or false)\n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n\"Sentiment\", \"Anger\", \"Item\" and \"Brand\" as the keys.\nIf the information isn't present, use \"unknown\" \\\nas the value.\nMake your response as short as possible.\nFormat the Anger value as a boolean.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>{\n  \"Sentiment\": \"positive\",\n  \"Anger\": false,\n  \"Item\": \"lamp with additional storage\",\n  \"Brand\": \"Lumina\"\n}\n</code></pre>"},{"location":"Inferring/#inferring-topics","title":"Inferring topics","text":"<pre><code>story = \"\"\"\nIn a recent survey conducted by the government, \npublic sector employees were asked to rate their level \nof satisfaction with the department they work at. \nThe results revealed that NASA was the most popular \ndepartment with a satisfaction rating of 95%.\n\nOne NASA employee, John Smith, commented on the findings, \nstating, \"I'm not surprised that NASA came out on top. \nIt's a great place to work with amazing people and \nincredible opportunities. I'm proud to be a part of \nsuch an innovative organization.\"\n\nThe results were also welcomed by NASA's management team, \nwith Director Tom Johnson stating, \"We are thrilled to \nhear that our employees are satisfied with their work at NASA. \nWe have a talented and dedicated team who work tirelessly \nto achieve our goals, and it's fantastic to see that their \nhard work is paying off.\"\n\nThe survey also revealed that the \nSocial Security Administration had the lowest satisfaction \nrating, with only 45% of employees indicating they were \nsatisfied with their job. The government has pledged to \naddress the concerns raised by employees in the survey and \nwork towards improving job satisfaction across all departments.\n\"\"\"\n</code></pre>"},{"location":"Inferring/#infer-5-topics","title":"Infer 5 topics","text":"<pre><code>prompt = f\"\"\"\nDetermine five topics that are being discussed in the \\\nfollowing text, which is delimited by triple backticks.\n\nMake each item one or two words long. \n\nFormat your response as a list of items separated by commas.\n\nText sample: '''{story}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>government survey, job satisfaction, NASA, Social Security Administration, employee concerns\n</code></pre> <pre><code>response.split(sep=',')\n</code></pre> <pre><code>['government survey',\n ' job satisfaction',\n ' NASA',\n ' Social Security Administration',\n ' employee concerns']\n</code></pre> <pre><code>topic_list = [\n    \"nasa\", \"local government\", \"engineering\", \n    \"employee satisfaction\", \"federal government\"\n]\n</code></pre>"},{"location":"Inferring/#make-a-news-alert-for-certain-topics","title":"Make a news alert for certain topics","text":"<pre><code>prompt = f\"\"\"\nDetermine whether each item in the following list of \\\ntopics is a topic in the text below, which\nis delimited with triple backticks.\n\nGive your answer as list with 0 or 1 for each topic.\\\n\nList of topics: {\", \".join(topic_list)}\n\nText sample: '''{story}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>nasa: 1\nlocal government: 0\nengineering: 0\nemployee satisfaction: 1\nfederal government: 1\n</code></pre> <pre><code>topic_dict = {i.split(': ')[0]: int(i.split(': ')[1]) for i in response.split(sep='\\n')}\nif topic_dict['nasa'] == 1:\n    print(\"ALERT: New NASA story!\")\n</code></pre> <pre><code>ALERT: New NASA story!\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/","title":"Iterative Prompt Development","text":""},{"location":"Iterative%20Prompt%20Development/#iterative-prompt-develelopment","title":"Iterative Prompt Develelopment","text":"<p>In this page we will iteratively analyze and refine your prompts to generate marketing copy from a product fact sheet.</p>"},{"location":"Iterative%20Prompt%20Development/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/#generate-a-marketing-product-description-from-a-product-fact-sheet","title":"Generate a marketing product description from a product fact sheet","text":"<pre><code>fact_sheet_chair = \"\"\"\nOVERVIEW\n- Part of a beautiful family of mid-century inspired office furniture, \nincluding filing cabinets, desks, bookcases, meeting tables, and more.\n- Several options of shell color and base finishes.\n- Available with plastic back and front upholstery (SWC-100) \nor full upholstery (SWC-110) in 10 fabric and 6 leather options.\n- Base finish options are: stainless steel, matte black, \ngloss white, or chrome.\n- Chair is available with or without armrests.\n- Suitable for home or business settings.\n- Qualified for contract use.\n\nCONSTRUCTION\n- 5-wheel plastic coated aluminum base.\n- Pneumatic chair adjust for easy raise/lower action.\n\nDIMENSIONS\n- WIDTH 53 CM | 20.87\u201d\n- DEPTH 51 CM | 20.08\u201d\n- HEIGHT 80 CM | 31.50\u201d\n- SEAT HEIGHT 44 CM | 17.32\u201d\n- SEAT DEPTH 41 CM | 16.14\u201d\n\nOPTIONS\n- Soft or hard-floor caster options.\n- Two choices of seat foam densities: \n medium (1.8 lb/ft3) or high (2.8 lb/ft3)\n- Armless or 8 position PU armrests \n\nMATERIALS\nSHELL BASE GLIDER\n- Cast Aluminum with modified nylon PA6/PA66 coating.\n- Shell thickness: 10 mm.\nSEAT\n- HD36 foam\n\nCOUNTRY OF ORIGIN\n- Italy\n\"\"\"\n</code></pre> <pre><code>prompt = f\"\"\"\nYour task is to help a marketing team create a \ndescription for a retail website of a product based \non a technical fact sheet.\n\nWrite a product description based on the information \nprovided in the technical specifications delimited by \ntriple backticks.\n\nTechnical specifications: ```{fact_sheet_chair}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Introducing our stunning mid-century inspired office chair, the perfect addition to any home or business setting. Part of a beautiful family of office furniture, including filing cabinets, desks, bookcases, meeting tables, and more, this chair is available in several options of shell color and base finishes to suit your style. Choose from plastic back and front upholstery (SWC-100) or full upholstery (SWC-110) in 10 fabric and 6 leather options.\n\nThe chair is constructed with a 5-wheel plastic coated aluminum base and features a pneumatic chair adjust for easy raise/lower action. It is available with or without armrests and is qualified for contract use. The base finish options are stainless steel, matte black, gloss white, or chrome.\n\nMeasuring at a width of 53 cm, depth of 51 cm, and height of 80 cm, with a seat height of 44 cm and seat depth of 41 cm, this chair is designed for ultimate comfort. You can also choose between soft or hard-floor caster options and two choices of seat foam densities: medium (1.8 lb/ft3) or high (2.8 lb/ft3). The armrests are available in either an armless or 8 position PU option.\n\nThe materials used in the construction of this chair are of the highest quality. The shell base glider is made of cast aluminum with modified nylon PA6/PA66 coating and has a shell thickness of 10 mm. The seat is made of HD36 foam, ensuring maximum comfort and durability.\n\nThis chair is made in Italy and is the perfect combination of style and functionality. Upgrade your workspace with our mid-century inspired office chair today!\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/#issue-1-the-text-is-too-long","title":"Issue 1: The text is too long","text":"<ul> <li>Limit the number of words/sentences/characters.</li> </ul> <pre><code>prompt = f\"\"\"\nYour task is to help a marketing team create a \ndescription for a retail website of a product based \non a technical fact sheet.\n\nWrite a product description based on the information \nprovided in the technical specifications delimited by \ntriple backticks.\n\nUse at most 50 words.\n\nTechnical specifications: ```{fact_sheet_chair}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Introducing our mid-century inspired office chair, perfect for home or business settings. With a variety of shell colors and base finishes, and the option of plastic or full upholstery in multiple fabrics and leathers, this chair is customizable to fit any style. The 5-wheel base and pneumatic chair adjust make it easy to use, while the choice of soft or hard-floor casters and seat foam densities ensure maximum comfort. Made in Italy with high-quality materials, this chair is also qualified for contract use.\n</code></pre> <pre><code>len(response)\n</code></pre> <pre><code>513\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/#issue-2-text-focuses-on-the-wrong-details","title":"Issue 2. Text focuses on the wrong details","text":"<ul> <li>Ask it to focus on the aspects that are relevant to the intended audience.</li> </ul> <pre><code>prompt = f\"\"\"\nYour task is to help a marketing team create a \ndescription for a retail website of a product based \non a technical fact sheet.\n\nWrite a product description based on the information \nprovided in the technical specifications delimited by \ntriple backticks.\n\nThe description is intended for furniture retailers, \nso should be technical in nature and focus on the \nmaterials the product is constructed from.\n\nUse at most 50 words.\n\nTechnical specifications: ```{fact_sheet_chair}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Introducing our mid-century inspired office chair, perfect for both home and business settings. With a range of shell colors and base finishes, including stainless steel and matte black, this chair is available with or without armrests. The 5-wheel plastic coated aluminum base and pneumatic chair adjust make it easy to raise and lower. Made in Italy with a cast aluminum shell and HD36 foam seat.\n</code></pre> <pre><code>prompt = f\"\"\"\nYour task is to help a marketing team create a \ndescription for a retail website of a product based \non a technical fact sheet.\n\nWrite a product description based on the information \nprovided in the technical specifications delimited by \ntriple backticks.\n\nThe description is intended for furniture retailers, \nso should be technical in nature and focus on the \nmaterials the product is constructed from.\n\nAt the end of the description, include every 7-character \nProduct ID in the technical specification.\n\nUse at most 50 words.\n\nTechnical specifications: ```{fact_sheet_chair}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Introducing our mid-century inspired office chair, perfect for home or business settings. With a range of shell colors and base finishes, and the option of plastic or full upholstery, this chair is both stylish and comfortable. Constructed with a 5-wheel plastic coated aluminum base and pneumatic chair adjust, it's also practical. Available with or without armrests and suitable for contract use. Product ID: SWC-100, SWC-110.\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/#issue-3-description-needs-a-table-of-dimensions","title":"Issue 3. Description needs a table of dimensions","text":"<ul> <li>Ask it to extract information and organize it in a table.</li> </ul> <pre><code>prompt = f\"\"\"\nYour task is to help a marketing team create a \ndescription for a retail website of a product based \non a technical fact sheet.\n\nWrite a product description based on the information \nprovided in the technical specifications delimited by \ntriple backticks.\n\nThe description is intended for furniture retailers, \nso should be technical in nature and focus on the \nmaterials the product is constructed from.\n\nAt the end of the description, include every 7-character \nProduct ID in the technical specification.\n\nAfter the description, include a table that gives the \nproduct's dimensions. The table should have two columns.\nIn the first column include the name of the dimension. \nIn the second column include the measurements in inches only.\n\nGive the table the title 'Product Dimensions'.\n\nFormat everything as HTML that can be used in a website. \nPlace the description in a &lt;div&gt; element.\n\nTechnical specifications: ```{fact_sheet_chair}```\n\"\"\"\n\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>&lt;div&gt;\n&lt;h2&gt;Mid-Century Inspired Office Chair&lt;/h2&gt;\n&lt;p&gt;Introducing our mid-century inspired office chair, part of a beautiful family of office furniture that includes filing cabinets, desks, bookcases, meeting tables, and more. This chair is available in several options of shell color and base finishes, allowing you to customize it to your liking. You can choose between plastic back and front upholstery or full upholstery in 10 fabric and 6 leather options. The base finish options are stainless steel, matte black, gloss white, or chrome. The chair is also available with or without armrests, making it suitable for both home and business settings. Plus, it's qualified for contract use, so you can trust its durability and quality.&lt;/p&gt;\n&lt;h3&gt;Construction&lt;/h3&gt;\n&lt;p&gt;The chair features a 5-wheel plastic coated aluminum base and a pneumatic chair adjust for easy raise/lower action. You can choose between soft or hard-floor caster options and two choices of seat foam densities: medium (1.8 lb/ft3) or high (2.8 lb/ft3). The chair is also available with armless or 8 position PU armrests.&lt;/p&gt;\n&lt;h3&gt;Materials&lt;/h3&gt;\n&lt;p&gt;The shell base glider is made of cast aluminum with modified nylon PA6/PA66 coating, and the shell thickness is 10 mm. The seat is made of HD36 foam, ensuring comfort and support.&lt;/p&gt;\n&lt;h3&gt;Product Dimensions&lt;/h3&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Width&lt;/td&gt;\n    &lt;td&gt;53 cm | 20.87\"&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Depth&lt;/td&gt;\n    &lt;td&gt;51 cm | 20.08\"&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Height&lt;/td&gt;\n    &lt;td&gt;80 cm | 31.50\"&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Seat Height&lt;/td&gt;\n    &lt;td&gt;44 cm | 17.32\"&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Seat Depth&lt;/td&gt;\n    &lt;td&gt;41 cm | 16.14\"&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n&lt;h3&gt;Product ID&lt;/h3&gt;\n&lt;p&gt;SWC-100, SWC-110&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Iterative%20Prompt%20Development/#load-python-libraries-to-view-html","title":"Load Python libraries to view HTMLMid-Century Inspired Office Chair","text":"<pre><code>from IPython.display import display, HTML\n</code></pre> <pre><code>display(HTML(response))\n</code></pre> <p>Introducing our mid-century inspired office chair, part of a beautiful family of office furniture that includes filing cabinets, desks, bookcases, meeting tables, and more. This chair is available in several options of shell color and base finishes, allowing you to customize it to your liking. You can choose between plastic back and front upholstery or full upholstery in 10 fabric and 6 leather options. The base finish options are stainless steel, matte black, gloss white, or chrome. The chair is also available with or without armrests, making it suitable for both home and business settings. Plus, it's qualified for contract use, so you can trust its durability and quality.</p> Construction <p>The chair features a 5-wheel plastic coated aluminum base and a pneumatic chair adjust for easy raise/lower action. You can choose between soft or hard-floor caster options and two choices of seat foam densities: medium (1.8 lb/ft3) or high (2.8 lb/ft3). The chair is also available with armless or 8 position PU armrests.</p> Materials <p>The shell base glider is made of cast aluminum with modified nylon PA6/PA66 coating, and the shell thickness is 10 mm. The seat is made of HD36 foam, ensuring comfort and support.</p> Product Dimensions Width 53 cm | 20.87\" Depth 51 cm | 20.08\" Height 80 cm | 31.50\" Seat Height 44 cm | 17.32\" Seat Depth 41 cm | 16.14\" Product ID <p>SWC-100, SWC-110</p>"},{"location":"Summarizing/","title":"Summarizing","text":""},{"location":"Summarizing/#summarizing","title":"Summarizing","text":"<p>In this page we will summarize text with a focus on specific topics.</p>"},{"location":"Summarizing/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Summarizing/#text-to-summarize","title":"Text to summarize","text":"<pre><code>prod_review = \"\"\"\nGot this panda plush toy for my daughter's birthday, \\\nwho loves it and takes it everywhere. It's soft and \\ \nsuper cute, and its face has a friendly look. It's \\ \na bit small for what I paid though. I think there \\ \nmight be other options that are bigger for the \\ \nsame price. It arrived a day earlier than expected, \\ \nso I got to play with it myself before I gave it \\ \nto her.\n\"\"\"\n</code></pre>"},{"location":"Summarizing/#summarize-with-a-wordsentencecharacter-limit","title":"Summarize with a word/sentence/character limit","text":"<pre><code>prompt = f\"\"\"\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site. \n\nSummarize the review below, delimited by triple \nbackticks, in at most 30 words. \n\nReview: ```{prod_review}```\n\"\"\"\n\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Soft and cute panda plush toy loved by daughter, but a bit small for the price. Arrived early.\n</code></pre>"},{"location":"Summarizing/#summarize-with-a-focus-on-shipping-and-delivery","title":"Summarize with a focus on shipping and delivery","text":"<pre><code>prompt = f\"\"\"\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site to give feedback to the \\\nShipping deparmtment. \n\nSummarize the review below, delimited by triple \nbackticks, in at most 30 words, and focusing on any aspects \\\nthat mention shipping and delivery of the product. \n\nReview: ```{prod_review}```\n\"\"\"\n\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The panda plush toy arrived a day earlier than expected, but the customer felt it was a bit small for the price paid.\n</code></pre>"},{"location":"Summarizing/#summarize-with-a-focus-on-price-and-value","title":"Summarize with a focus on price and value","text":"<pre><code>prompt = f\"\"\"\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site to give feedback to the \\\npricing deparmtment, responsible for determining the \\\nprice of the product.  \n\nSummarize the review below, delimited by triple \nbackticks, in at most 30 words, and focusing on any aspects \\\nthat are relevant to the price and perceived value. \n\nReview: ```{prod_review}```\n\"\"\"\n\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The panda plush toy is soft, cute, and loved by the recipient, but the price may be too high for its size.\n</code></pre>"},{"location":"Summarizing/#comment","title":"Comment","text":"<ul> <li>Summaries include topics that are not related to the topic of focus.</li> </ul>"},{"location":"Summarizing/#try-extract-instead-of-summarize","title":"Try \"extract\" instead of \"summarize\"","text":"<pre><code>prompt = f\"\"\"\nYour task is to extract relevant information from \\ \na product review from an ecommerce site to give \\\nfeedback to the Shipping department. \n\nFrom the review below, delimited by triple quotes \\\nextract the information relevant to shipping and \\ \ndelivery. Limit to 30 words. \n\nReview: ```{prod_review}```\n\"\"\"\n\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>The product arrived a day earlier than expected.\n</code></pre>"},{"location":"Summarizing/#summarize-multiple-product-reviews","title":"Summarize multiple product reviews","text":"<pre><code>review_1 = prod_review \n\n# review for a standing lamp\nreview_2 = \"\"\"\nNeeded a nice lamp for my bedroom, and this one \\\nhad additional storage and not too high of a price \\\npoint. Got it fast - arrived in 2 days. The string \\\nto the lamp broke during the transit and the company \\\nhappily sent over a new one. Came within a few days \\\nas well. It was easy to put together. Then I had a \\\nmissing part, so I contacted their support and they \\\nvery quickly got me the missing piece! Seems to me \\\nto be a great company that cares about their customers \\\nand products. \n\"\"\"\n\n# review for an electric toothbrush\nreview_3 = \"\"\"\nMy dental hygienist recommended an electric toothbrush, \\\nwhich is why I got this. The battery life seems to be \\\npretty impressive so far. After initial charging and \\\nleaving the charger plugged in for the first week to \\\ncondition the battery, I've unplugged the charger and \\\nbeen using it for twice daily brushing for the last \\\n3 weeks all on the same charge. But the toothbrush head \\\nis too small. I\u2019ve seen baby toothbrushes bigger than \\\nthis one. I wish the head was bigger with different \\\nlength bristles to get between teeth better because \\\nthis one doesn\u2019t.  Overall if you can get this one \\\naround the $50 mark, it's a good deal. The manufactuer's \\\nreplacements heads are pretty expensive, but you can \\\nget generic ones that're more reasonably priced. This \\\ntoothbrush makes me feel like I've been to the dentist \\\nevery day. My teeth feel sparkly clean! \n\"\"\"\n\n# review for a blender\nreview_4 = \"\"\"\nSo, they still had the 17 piece system on seasonal \\\nsale for around $49 in the month of November, about \\\nhalf off, but for some reason (call it price gouging) \\\naround the second week of December the prices all went \\\nup to about anywhere from between $70-$89 for the same \\\nsystem. And the 11 piece system went up around $10 or \\\nso in price also from the earlier sale price of $29. \\\nSo it looks okay, but if you look at the base, the part \\\nwhere the blade locks into place doesn\u2019t look as good \\\nas in previous editions from a few years ago, but I \\\nplan to be very gentle with it (example, I crush \\\nvery hard items like beans, ice, rice, etc. in the \\ \nblender first then pulverize them in the serving size \\\nI want in the blender then switch to the whipping \\\nblade for a finer flour, and use the cross cutting blade \\\nfirst when making smoothies, then use the flat blade \\\nif I need them finer/less pulpy). Special tip when making \\\nsmoothies, finely cut and freeze the fruits and \\\nvegetables (if using spinach-lightly stew soften the \\ \nspinach then freeze until ready for use-and if making \\\nsorbet, use a small to medium sized food processor) \\ \nthat you plan to use that way you can avoid adding so \\\nmuch ice if at all-when making your smoothie. \\\nAfter about a year, the motor was making a funny noise. \\\nI called customer service but the warranty expired \\\nalready, so I had to buy another one. FYI: The overall \\\nquality has gone done in these types of products, so \\\nthey are kind of counting on brand recognition and \\\nconsumer loyalty to maintain sales. Got it in about \\\ntwo days.\n\"\"\"\n\nreviews = [review_1, review_2, review_3, review_4]\n</code></pre> <pre><code>for i in range(len(reviews)):\n    prompt = f\"\"\"\n    Your task is to generate a short summary of a product \\ \n    review from an ecommerce site. \n\n    Summarize the review below, delimited by triple \\\n    backticks in at most 20 words. \n\n    Review: ```{reviews[i]}```\n    \"\"\"\n\n    response = get_completion(prompt)\n    print(i, response, \"\\n\")\n</code></pre> <pre><code>0 Soft and cute panda plush toy loved by daughter, but a bit small for the price. Arrived early.\n\n1 Affordable lamp with storage, fast shipping, and excellent customer service. Easy to assemble and missing parts were quickly replaced.\n\n2 Good battery life, small toothbrush head, but effective cleaning. Good deal if bought around $50.\n\n3 The product was on sale for $49 in November, but the price increased to $70-$89 in December. The base doesn't look as good as previous editions, but the reviewer plans to be gentle with it. A special tip for making smoothies is to freeze the fruits and vegetables beforehand. The motor made a funny noise after a year, and the warranty had expired. Overall quality has decreased.\n</code></pre>"},{"location":"Transforming/","title":"Transforming","text":""},{"location":"Transforming/#transforming","title":"Transforming","text":"<p>In this page, we will explore how to use Large Language Models for text transformation tasks such as language translation, spelling and grammar checking, tone adjustment, and format conversion.</p>"},{"location":"Transforming/#setup","title":"Setup","text":"<pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_type = os.getenv(\"api_type\")\nopenai.api_base = os.getenv(\"api_base\")\nopenai.api_version = os.getenv(\"api_version\")\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</code></pre> <pre><code>def get_completion(prompt, model=\"chatgpt-gpt35-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        engine=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n        max_tokens=800,\n        top_p=0.95,\n        frequency_penalty=0,\n        presence_penalty=0,\n        stop=None)\n    return response.choices[0].message[\"content\"]\n</code></pre>"},{"location":"Transforming/#translation","title":"Translation","text":"<p>ChatGPT is trained with sources in many languages. This gives the model the ability to do translation. Here are some examples of how to use this capability.</p> <pre><code>prompt = f\"\"\"\nTranslate the following English text to Hindi: \\ \n```Hi, I would like to order a blender```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>\u0928\u092e\u0938\u094d\u0924\u0947, \u092e\u0948\u0902 \u090f\u0915 \u092c\u094d\u0932\u0947\u0902\u0921\u0930 \u0911\u0930\u094d\u0921\u0930 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0942\u0901\u0917\u093e\u0964\n</code></pre> <pre><code>prompt = f\"\"\"\nTell me which language this is: \n```\u0928\u092e\u0938\u094d\u0924\u0947, \u092e\u0948\u0902 \u090f\u0915 \u092c\u094d\u0932\u0947\u0902\u0921\u0930 \u0911\u0930\u094d\u0921\u0930 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0942\u0901\u0917\u093e\u0964```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>This is Hindi.\n</code></pre> <pre><code>prompt = f\"\"\"\nTranslate the following  text to Hindi and Bengali\nand English pirate: \\\n```I want to order a basketball```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Hindi: \u092e\u0948\u0902 \u090f\u0915 \u092c\u093e\u0938\u094d\u0915\u0947\u091f\u092c\u0949\u0932 \u0906\u0926\u0947\u0936 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0924\u093e \u0939\u0942\u0901\u0964\nBengali: \u0986\u09ae\u09bf \u098f\u0995\u099f\u09bf \u09ac\u09be\u09b8\u09cd\u0995\u09c7\u099f\u09ac\u09b2 \u0985\u09b0\u09cd\u09a1\u09be\u09b0 \u0995\u09b0\u09a4\u09c7 \u099a\u09be\u0987\u0964\nEnglish Pirate: ```Arrr, I be wantin' to order a basketball, matey!```\n</code></pre> <pre><code>prompt = f\"\"\"\nTranslate the following text to Hindi in both the \\\nformal and informal forms: \n'Would you like to order a pillow?'\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Formal: \u0915\u094d\u092f\u093e \u0906\u092a \u090f\u0915 \u0924\u0915\u093f\u092f\u093e \u0906\u0930\u094d\u0921\u0930 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0947\u0902\u0917\u0947?\nInformal: \u0915\u094d\u092f\u093e \u0924\u0941\u092e \u090f\u0915 \u0924\u0915\u093f\u092f\u093e \u0906\u0930\u094d\u0921\u0930 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u094b\u0917\u0947?\n</code></pre>"},{"location":"Transforming/#universal-translator","title":"Universal Translator","text":"<p>Imagine you are in charge of IT at a large multinational e-commerce company. Users are messaging you with IT issues in all their native languages. Your staff is from all over the world and speaks only their native languages. You need a universal translator!</p> <pre><code>user_messages = [\n  \"La performance du syst\u00e8me est plus lente que d'habitude.\",  # System performance is slower than normal         \n  \"Mi monitor tiene p\u00edxeles que no se iluminan.\",              # My monitor has pixels that are not lighting\n  \"Il mio mouse non funziona\",                                 # My mouse is not working\n  \"M\u00f3j klawisz Ctrl jest zepsuty\",                             # My keyboard has a broken control key\n  \"\u6211\u7684\u5c4f\u5e55\u5728\u95ea\u70c1\"                                               # My screen is flashing\n] \n</code></pre> <pre><code>for issue in user_messages:\n    prompt = f\"Tell me what language this is: ```{issue}```\"\n    lang = get_completion(prompt)\n    print(f\"Original message ({lang}): {issue}\")\n\n    prompt = f\"\"\"\n    Translate the following  text to English \\\n    and Korean: ```{issue}```\n    \"\"\"\n    response = get_completion(prompt)\n    print(response, \"\\n\")\n</code></pre> <pre><code>Original message (This is French.): La performance du syst\u00e8me est plus lente que d'habitude.\nEnglish: The system performance is slower than usual.\nKorean: \uc2dc\uc2a4\ud15c \uc131\ub2a5\uc774 \ud3c9\uc18c\ubcf4\ub2e4 \ub290\ub9bd\ub2c8\ub2e4.\n\nOriginal message (This is Spanish.): Mi monitor tiene p\u00edxeles que no se iluminan.\nEnglish: My monitor has pixels that don't light up.\nKorean: \ub0b4 \ubaa8\ub2c8\ud130\uc5d0\ub294 \ubd88\uc774 \ucf1c\uc9c0\uc9c0 \uc54a\ub294 \ud53d\uc140\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\nOriginal message (This is Italian.): Il mio mouse non funziona\nEnglish: My mouse is not working.\nKorean: \ub0b4 \ub9c8\uc6b0\uc2a4\uac00 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\nOriginal message (This is Polish.): M\u00f3j klawisz Ctrl jest zepsuty\nEnglish: My Ctrl key is broken.\nKorean: \uc81c Ctrl \ud0a4\uac00 \uace0\uc7a5 \ub0ac\uc5b4\uc694.\n\nOriginal message (This is Chinese (Simplified).): \u6211\u7684\u5c4f\u5e55\u5728\u95ea\u70c1\nEnglish: My screen is flickering.\nKorean: \ub0b4 \ud654\uba74\uc774 \uae5c\ube61\uc785\ub2c8\ub2e4.\n</code></pre>"},{"location":"Transforming/#tone-transformation","title":"Tone Transformation","text":"<p>Writing can vary based on the intended audience. ChatGPT can produce different tones.</p> <pre><code>prompt = f\"\"\"\nTranslate the following from slang to a business letter: \n'Dude, This is Joe, check out this spec on this standing lamp.'\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>Dear Sir/Madam,\n\nI am writing to bring to your attention a standing lamp that I believe may be of interest to you. Please find attached the specifications for your review.\n\nThank you for your time and consideration.\n\nSincerely,\n\nJoe\n</code></pre>"},{"location":"Transforming/#format-conversion","title":"Format Conversion","text":"<p>ChatGPT can translate between formats. The prompt should describe the input and output formats.</p> <pre><code>data_json = { \"resturant employees\" :[ \n    {\"name\":\"Shyam\", \"email\":\"shyamjaiswal@gmail.com\"},\n    {\"name\":\"Bob\", \"email\":\"bob32@gmail.com\"},\n    {\"name\":\"Jai\", \"email\":\"jai87@gmail.com\"}\n]}\n\nprompt = f\"\"\"\nTranslate the following python dictionary from JSON to an HTML \\\ntable with column headers and title: {data_json}\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>&lt;table&gt;\n  &lt;caption&gt;Restaurant Employees&lt;/caption&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Name&lt;/th&gt;\n      &lt;th&gt;Email&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Shyam&lt;/td&gt;\n      &lt;td&gt;shyamjaiswal@gmail.com&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Bob&lt;/td&gt;\n      &lt;td&gt;bob32@gmail.com&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Jai&lt;/td&gt;\n      &lt;td&gt;jai87@gmail.com&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>from IPython.display import display, Markdown, Latex, HTML, JSON\ndisplay(HTML(response))\n</code></pre> Restaurant Employees Name Email Shyam shyamjaiswal@gmail.com Bob bob32@gmail.com Jai jai87@gmail.com"},{"location":"Transforming/#spellcheckgrammar-check","title":"Spellcheck/Grammar check.","text":"<p>Here are some examples of common grammar and spelling problems and the LLM's response. </p> <p>To signal to the LLM that you want it to proofread your text, you instruct the model to 'proofread' or 'proofread and correct'.</p> <pre><code>text = [ \n  \"The girl with the black and white puppies have a ball.\",  # The girl has a ball.\n  \"Yolanda has her notebook.\", # ok\n  \"Its going to be a long day. Does the car need it\u2019s oil changed?\",  # Homonyms\n  \"Their goes my freedom. There going to bring they\u2019re suitcases.\",  # Homonyms\n  \"Your going to need you\u2019re notebook.\",  # Homonyms\n  \"That medicine effects my ability to sleep. Have you heard of the butterfly affect?\", # Homonyms\n  \"This phrase is to cherck chatGPT for speling abilitty\"  # spelling\n]\nfor t in text:\n    prompt = f\"\"\"Proofread and correct the following text\n    and rewrite the corrected version. If you don't find\n    and errors, just say \"No errors found\". Don't use \n    any punctuation around the text:\n    ```{t}```\"\"\"\n    response = get_completion(prompt)\n    print(response)\n</code></pre> <pre><code>The girl with the black and white puppies has a ball.\nNo errors found.\nIt's going to be a long day. Does the car need its oil changed?\nTheir goes my freedom. There going to bring they're suitcases.\n\nCorrected version: \nThere goes my freedom. They're going to bring their suitcases.\nYou're going to need your notebook.\nThat medicine affects my ability to sleep. Have you heard of the butterfly effect?\nThis phrase is to check ChatGPT for spelling ability.\n</code></pre> <pre><code>text = f\"\"\"\nGot this for my daughter for her birthday cuz she keeps taking \\\nmine from my room.  Yes, adults also like pandas too.  She takes \\\nit everywhere with her, and it's super soft and cute.  One of the \\\nears is a bit lower than the other, and I don't think that was \\\ndesigned to be asymmetrical. It's a bit small for what I paid for it \\\nthough. I think there might be other options that are bigger for \\\nthe same price.  It arrived a day earlier than expected, so I got \\\nto play with it myself before I gave it to my daughter.\n\"\"\"\nprompt = f\"proofread and correct this review: ```{text}```\"\nresponse = get_completion(prompt)\nprint(response)\n</code></pre> <pre><code>I got this for my daughter's birthday because she keeps taking mine from my room. Yes, adults also like pandas too. She takes it everywhere with her, and it's super soft and cute. However, one of the ears is a bit lower than the other, and I don't think that was designed to be asymmetrical. Additionally, it's a bit small for what I paid for it. I think there might be other options that are bigger for the same price. On the positive side, it arrived a day earlier than expected, so I got to play with it myself before I gave it to my daughter.\n</code></pre> <pre><code>from redlines import Redlines\n\ndiff = Redlines(text,response)\ndisplay(Markdown(diff.output_markdown))\n</code></pre> <p>Got I got this for my daughter for her daughter's birthday cuz because she keeps taking mine from my room.  room. Yes, adults also like pandas too.  too. She takes it everywhere with her, and it's super soft and cute.  One cute. However, one of the ears is a bit lower than the other, and I don't think that was designed to be asymmetrical. It's Additionally, it's a bit small for what I paid for it though. it. I think there might be other options that are bigger for the same price.  It price. On the positive side, it arrived a day earlier than expected, so I got to play with it myself before I gave it to my daughter.</p> <pre><code>prompt = f\"\"\"\nproofread and correct this review. Make it more compelling. \nEnsure it follows APA style guide and targets an advanced reader. \nOutput in markdown format.\nText: ```{text}```\n\"\"\"\nresponse = get_completion(prompt)\ndisplay(Markdown(response))\n</code></pre> <p>Title: A Soft and Cute Panda Plushie for All Ages</p> <p>As an adult, I can attest that pandas are not just for kids. That's why I got this adorable panda plushie for my daughter's birthday, after she kept taking mine from my room. And let me tell you, it was a hit!</p> <p>The plushie is super soft and cuddly, making it the perfect companion for my daughter. She takes it everywhere with her, and it has quickly become her favorite toy. However, I did notice that one of the ears is a bit lower than the other, which I don't think was designed to be asymmetrical. But that doesn't take away from its cuteness.</p> <p>The only downside is that it's a bit small for the price I paid. I think there might be other options that are bigger for the same price. But overall, I'm happy with my purchase.</p> <p>One thing that surprised me was that it arrived a day earlier than expected. This gave me the chance to play with it myself before giving it to my daughter. And I have to say, I was impressed with the quality and attention to detail.</p> <p>In conclusion, if you're looking for a soft and cute panda plushie for yourself or a loved one, this is definitely a great option. Just be aware that it might be a bit smaller than expected.</p> <p>Thanks to the following sites:</p> <p>https://writingprompts.com/bad-grammar-examples/</p>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#contact-us","title":"Contact us","text":"<p>Contributers</p> Ashish kumar Area of expertise : Natural Language Processing, Computer Vision, MLOps,  Generative AI, Statistical Modeling, Uncertainity Analysis, Data Science, Research and Development"}]}